name: Build
on:
  workflow_call:
    inputs:
      upload-artifact:
        type: boolean
        default: true
      tag-name:
        type: string
        default: "draft"
      channel:
        type: string
        default: "dev"

env:
  IS_GITHUB_ACTIONS: 1
  CHANNEL: "${{ inputs.channel }}"
  FLUTTER_VERSION: '3.24.0'
  NDK_VERSION: r26d
  UPLOAD_ARTIFACT: "${{ inputs.upload-artifact }}"
  TAG_NAME: "${{ inputs.tag-name }}"

jobs:
  test:
    outputs:
      draftBuildCode: ${{ steps.draftBuildCode.outputs.datetime }}
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - uses: subosito/flutter-action@v2.16.0
        with:
          flutter-version: ${{ env.FLUTTER_VERSION }}
          channel: 'stable'
          cache: true
          
      - name: Prepare
        run: make linux-prepare

      - name: Test
        run: flutter test

      - name: make draftBuildCode
        id: draftBuildCode
        run: echo "::set-output name=datetime::$(date +'%d.%H.%M')"

  build:
    needs: test
    permissions: write-all
    strategy:
      fail-fast: false
      matrix:
        include:
          - platform: android
            os: ubuntu-latest
            targets: apk

          - platform: windows
            os: windows-2022
            aarch: amd64
            targets: exe

          - platform: linux
            os: ubuntu-22.04
            aarch: amd64
            targets: AppImage

    runs-on: ${{ matrix.os }}

    steps:
      - name: Checkout
        uses: actions/checkout@v3

      # --- Setup Flutter ---
      - name: Setup Flutter
        uses: subosito/flutter-action@v2.16.0
        with:
          flutter-version: ${{ env.FLUTTER_VERSION }}
          channel: 'stable'
          cache: true

      # --- Android Setup ---
      - name: Setup Java
        if: matrix.platform == 'android'
        uses: actions/setup-java@v4
        with:
          distribution: 'zulu'
          java-version: 17

      - name: Setup NDK
        if: matrix.platform == 'android'
        uses: nttld/setup-ndk@v1
        with:
          ndk-version: ${{ env.NDK_VERSION }}
          add-to-path: true
          link-to-sdk: true

      - name: Setup Gradle
        if: matrix.platform == 'android'
        uses: gradle/actions/setup-gradle@v3
        with:
          gradle-version: 7.5

      # --- Install Dependencies ---
      - name: Install Dependencies
        run: make ${{ matrix.platform }}-install-dependencies

      # --- Android Signing ---
      - name: Setup Android Signing
        if: matrix.platform == 'android' && inputs.upload-artifact
        run: |
          mkdir -p android
          echo "${{ secrets.ANDROID_SIGNING_KEY }}" | base64 --decode > android/key.jks
          echo "storeFile=$(pwd)/android/key.jks" > android/key.properties
          echo "storePassword=${{ secrets.ANDROID_SIGNING_STORE_PASSWORD }}" >> android/key.properties
          echo "keyPassword=${{ secrets.ANDROID_SIGNING_KEY_PASSWORD }}" >> android/key.properties
          echo "keyAlias=${{ secrets.ANDROID_SIGNING_KEY_ALIAS }}" >> android/key.properties

      # --- Build ---
      - name: Prepare for ${{ matrix.platform }}
        run: make ${{ matrix.platform }}-prepare

      - name: Build ${{ matrix.platform }}
        run: make ${{ matrix.platform }}-release

      # --- Copy Artifacts ---
      - name: Copy Artifacts
        run: |
          mkdir -p out
          if [[ "${{ matrix.platform }}" == "android" ]]; then
            cp ./build/app/outputs/flutter-apk/*.apk out/ || echo "No APKs found"
          elif [[ "${{ matrix.platform }}" == "windows" ]]; then
            cp ./dist/*.exe out/ || echo "No EXE found"
          else
            cp ./dist/*.AppImage out/ || echo "No AppImage found"
          fi

      # --- Upload Artifacts ---
      - name: Upload Artifacts
        if: ${{ inputs.upload-artifact }}
        uses: actions/upload-artifact@v3
        with:
          name: ${{ matrix.platform }}-${{ env.TAG_NAME }}
          path: out
